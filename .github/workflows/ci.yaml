# Hello traveler!
# This is the CI workflow for mirrord.
# It is a bit complicated, but it is also very powerful.
# We try to optimize for speed, but sometimes there are limitations.
# Please try to document it here so people won't try repeating your errors.
# 1. GitHub cache is limited to 10GB, so we try to have less jobs to not exceed it, since if we get over 10GB
#    the cache will be evicted then builds will be slower, so it's better to have less jobs.
# 2. I (Aviram) tried to use a container to build the Linux stuff, but couldn't get the e2e to work and (minikube in container)
#    and the benefit seemed little.
# 3. Please be mindful, we try to target less than 30 minutes for the CI to run. In a perfect world it'd be less than 5m.
#     If you're adding something, please make sure it doesn't impact too much, and if you're reviewing please have it in mind.
# 4. Make sure to specify target for cargo invocations, to re-use cache (cargo build --target X while host is X then cargo build will not use cache
#    since it's different targets from it's perspective - https://doc.rust-lang.org/cargo/guide/build-cache.html
#
# - Adding a compiled app to e2e:
#
# If you want to add a rust/go/[other compiled language] to the list of e2e apps, then you have to check 2 other
# places.
#
# 1. The `test-images` repo, if your e2e wants to use a custom image, that's not already there, and;
# 2. The `mirrord-ci` repo, where you should add the compilation call to `e2e-setup-action/action.yaml`.
#
# Forgetting (2) will probably net you a message saying that `mirrord exec` could not find the path of the app,
# while forgetting (1) nets you a message saying that the service could not be reached/found.
#
# Caveats:
#
# You cannot use `workspace` dependencies in the test app, it fails to build, must fully specify the dependency.
#
# Related to (2): If you modify `mirrord-ci/actions.yaml`, you'll be affecting every PR!
name: CI

on:
  workflow_dispatch:
  push:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous runs on the same PR.
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  MIRRORD_TELEMETRY: false

jobs:

  integration_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # Checkout the mirrord repo.
      - uses: actions-rust-lang/setup-rust-toolchain@v1 # Install rust.
        with:
          target: x86_64-unknown-linux-gnu
      - run: |
          cd mirrord/layer/tests/apps/outgoing
          cargo build
      - run: cargo test --target x86_64-unknown-linux-gnu -p mirrord-layer --test outgoing outgoing_tcp::with_config_2

  macos_tests:
    runs-on: macos-13
    env:
      MIRRORD_TEST_USE_EXISTING_LIB: ../../target/x86_64-apple-darwin/debug/libmirrord_layer.dylib
    steps:
      - uses: actions/checkout@v3 # Checkout the mirrord repo.
      # the setup rust toolchain action ignores the input if file exists.. so remove it
      - run: rm rust-toolchain.toml
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy
          target: aarch64-apple-darwin
          toolchain: nightly-2023-09-07
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          cd mirrord/layer/tests/apps/outgoing
          cargo build
      - run: cargo build --target=x86_64-apple-darwin -p mirrord-layer # Build layer lib. The tests load it into the apps.
      - name: mirrord layer tests
        run: cargo test --target=x86_64-apple-darwin -p mirrord-layer --test outgoing outgoing_tcp::with_config_2
