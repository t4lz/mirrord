name: CI

on:
  workflow_dispatch:
  push:
    branches-ignore: [staging-squash-merge.tmp]
  pull_request:
    branches: [main, staging, trying]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous runs on the same PR.
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:


  test_agent_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          tags: test
          file: mirrord/agent/Dockerfile
          outputs: type=docker,dest=/tmp/test.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: upload image
        uses: actions/upload-artifact@v2
        with:
          name: test
          path: /tmp/test.tar

  build_mirrord:
    runs-on: ubuntu-latest
    name: build mirrord
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - run: cargo build --manifest-path=./Cargo.toml
      - name: upload layer
        uses: actions/upload-artifact@v3
        with:
          name: layer-lib
          path: target/debug/libmirrord_layer.so
          if-no-files-found: error

  e2e:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container-runtime: ["docker", "containerd"]
    name: e2e
    needs: [build_mirrord, test_agent_image]
    env:
      MIRRORD_AGENT_RUST_LOG: "warn,mirrord=debug"
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - run: npm install express
      - uses: actions/setup-python@v3
      - run: pip3 install flask
      - run: pip3 install fastapi
      - run: pip3 install uvicorn[standard]
      - run: sudo apt-get update && sudo apt-get install -y curl
      - uses: actions/setup-go@v3
        with:
          go-version: "1.18.0"
      - run: |
          cd tests/go-e2e
          go build -o 18
      - run: |
          cd tests/go-e2e-env
          go build -o 18
      - run: |
          cd tests/go-e2e-outgoing
          go build -o 18
      - run: |
          cd tests/go-e2e-dns
          go build -o 18
      - run: |
          cd tests/go-e2e-dir
          go build -o 18
      - uses: actions/setup-go@v3
        with:
          go-version: "1.19.0"
      - run: |
          cd tests/go-e2e
          go build -o 19
      - run: |
          cd tests/go-e2e-env
          go build -o 19
      - run: |
          cd tests/go-e2e-outgoing
          go build -o 19
      - run: |
          cd tests/go-e2e-dns
          go build -o 19
      - run: |
          cd tests/go-e2e-dir
          go build -o 19
      - uses: actions/setup-go@v3
        with:
          go-version: "1.20.0-rc.3"
      - run: |
          go version
      - run: |
          cd tests/go-e2e
          go build -o 20
      - run: |
          cd tests/go-e2e-env
          go build -o 20
      - run: |
          cd tests/go-e2e-outgoing
          go build -o 20
      - run: |
          cd tests/go-e2e-dns
          go build -o 20
      - run: |
          cd tests/go-e2e-dir
          go build -o 20
      - run: |
          cd tests/rust-e2e-fileops
          cargo build
      - run: |
          cd tests/rust-unix-socket-client
          cargo build
      - run: |
          cd tests/rust-bypassed-unix-socket
          cargo build
      - name: download image
        uses: actions/download-artifact@v2
        with:
          name: test
          path: /tmp
      - name: start minikube
        uses: medyagh/setup-minikube@master
        with:
          container-runtime: ${{matrix.container-runtime}}
      - run: minikube image load /tmp/test.tar
      - name: cargo test containerd
        run: cargo test -p tests go20_dns_lookup
      - name: Collect logs
        if: ${{ failure() }}
        run: |
          kubectl describe pods
          docker exec minikube find /var/log/pods -print -exec cat {} \;
