name: CI

on:
  workflow_dispatch:
  push:
    branches-ignore: [staging-squash-merge.tmp]
  pull_request:
    branches: [main, staging, trying]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous runs on the same PR.
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  changed_files:
    runs-on: ubuntu-latest
    # don't run CI on drafts
    if: github.event.pull_request.draft == false
    outputs:
      rs_changed: ${{ steps.changed-rs.outputs.any_changed }}
      intellij_changed: ${{ steps.changed-intellij.outputs.any_changed }}
      markdown_changed: ${{ steps.changed-markdown.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: get changed rs files
        id: changed-rs
        uses: tj-actions/changed-files@v32
        with:
          files: |
            **/*.rs
            mirrord/**
            tests/**
            Cargo.toml
            Cargo.lock
            .dockerignore
            rust-toolchain.toml
            rustfmt.toml
            .cargo/**
            .github/workflows/ci.yaml
      - name: get intellij changes
        id: changed-intellij
        uses: tj-actions/changed-files@v32
        with:
          files: |
            intellij-ext/**
      - name: get markdown changes
        id: changed-markdown
        uses: tj-actions/changed-files@v32
        with:
          files: |
            CHANGELOG.md
            README.md
      - name: output test
        run: |
          echo ${{ steps.changed-rs.outputs.any_changed }};
          echo ${{ steps.changed-rs.outputs.all_changed_files }};
          echo ${{ steps.changed-intellij.outputs.any_changed }};
          echo ${{ steps.changed-intellij.outputs.all_changed_files }};
          echo ${{ steps.changed-markdown.outputs.any_changed }};
          echo ${{ steps.changed-markdown.outputs.all_changed_files }};

  test_agent_image:
    runs-on: ubuntu-latest
    needs: changed_files
    if: ${{needs.changed_files.outputs.rs_changed == 'true'}}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          tags: test
          file: mirrord/agent/Dockerfile
          outputs: type=docker,dest=/tmp/test.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: upload image
        uses: actions/upload-artifact@v2
        with:
          name: test
          path: /tmp/test.tar

  build_mirrord:
    runs-on: ubuntu-latest
    name: build mirrord
    needs: changed_files
    if: ${{needs.changed_files.outputs.rs_changed == 'true'}}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
        with:
          key: ubuntu-latest
      - run: cargo build --manifest-path=./Cargo.toml
      - name: upload layer
        uses: actions/upload-artifact@v3
        with:
          name: layer-lib
          path: target/debug/libmirrord_layer.so
          if-no-files-found: error

  e2e:
    runs-on: ubuntu-latest
    name: e2e
    needs: [build_mirrord, test_agent_image, changed_files]
    if: ${{needs.changed_files.outputs.rs_changed == 'true'}}
    env:
      MIRRORD_AGENT_RUST_LOG: "warn,mirrord=debug"
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
        with:
          key: ubuntu-latest
      - uses: actions/setup-go@v3
        with:
          go-version: "1.20.0-rc.3"
      - run: |
          go version
      - run: |
          cd tests/go-e2e-fileops
          go build -o 20
      - name: start minikube
        uses: medyagh/setup-minikube@master
        with:
          container-runtime: containerd
      - name: download image
        uses: actions/download-artifact@v2
        with:
          name: test
          path: /tmp
      - run: minikube image load /tmp/test.tar
      - name: cargo test
        run: cargo test -p tests test_file_ops_linux
      - name: switch minikube runtime
        run: |
          minikube delete
          minikube start --container-runtime=docker
          minikube image load /tmp/test.tar
      - name: test with docker runtime
        run: cargo test -p tests test_file_ops_linux
      - name: Collect logs
        if: ${{ failure() }}
        run: |
          kubectl describe pods
          docker exec minikube find /var/log/pods -print -exec cat {} \;